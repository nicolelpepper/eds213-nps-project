---
title: "NPS Project Data Cleaning"
subtitle: "EDS 213 - Final Project"
author: "Nicole Pepper"
format: html
editor_options: 
  chunk_output_type: console
execute: 
  eval: true
  warning: false
  message: false
format:
  html:
    toc: true 
    code-fold: true
---

## Set up Workspace
```{r}
# ---- Load libraries ----
library(here)
library(tidyverse)
library(dplyr)
library(stringr)
library(readr)
library(lubridate)
library(duckdb)
library(dbplyr)
library(DBI)

```

## Load Data
```{r}
# ---- Load raw data ----
load(here("data/raw/parks.rda"))
load(here("data/raw/species.rda"))
visitation <- read_csv(here("data/raw/park-visitation.csv"))
```

## Explore data
```{r}
glimpse(visitation)
glimpse(species)
glimpse(parks)
```

## Prepare Data for Database

### 1) Clean visitation data

- Rename ParkName to FullName
- Remove NP from park name (FullName)
- Remove extra floating text

```{r}
# ---- Cleak visitation data----
visitation_clean <- visitation |>
  rename(FullName = ParkName) |>
  mutate(FullName = str_remove(FullName, " NP")) |>
  mutate(FullName = str_trim(FullName))

```

### 2) Clean parks data
- Rename UnitCode to ID
- Filter parks to only include National Parks

```{r}

# ---- Clean parks data ----

parks_clean <- parks |>
  rename(ID = UnitCode) |>
  
  # Create a column that indicates whether a park contains "National Park"
  mutate(NationalPark = str_detect(FullName, "National Park")) |>
  # Filter for only when NationalPark is true
  filter(NationalPark == TRUE) |>
  
  # Remove "National Park" from names in Full Name
  filter(str_detect(FullName, "National Park")) |>
  mutate(FullName = str_replace(FullName, "National Park.*", "")) |>
  mutate(FullName = str_replace(FullName, "  ", " ")) |>
  mutate(FullName = str_trim(FullName)) |>
  mutate(FullName = str_trim(FullName))

```

### 3) Join datasets by FullName, which will use to connect with primary key (ID)

##### Match FullNames column in both datasets

- Check to find park names (FullName) that do not match in both datasets

```{r}
# Get unique park names for each dataset
park_names <- unique(parks_clean$FullName)
visitation_names <- unique(visitation_clean$FullName)

# Find items in park_names but not in visitation_names
not_in_visitation <- setdiff(park_names, visitation_names)
# Find items in visitation_names but not in park_names
not_in_parks <- setdiff(visitation_names, park_names)

# Find where they do not match
no_match <- union(not_in_visitation, not_in_parks)

not_in_visitation
not_in_parks
no_match
```

- Clean parks FullName column
```{r}
# ---- Clean national park names (FullName) in NP dataset ----
parks_clean <- parks_clean |>
  mutate(FullName = str_replace(FullName, "Wrangell - St Elias", "Wrangell-St. Elias")) |>
  mutate(FullName = str_replace(FullName, "Sequoia", "Sequoia and Kings Canyon")) |>
  mutate(FullName = str_replace(FullName, "Sequoia and Kings Canyon and Kings Canyon", "Sequoia and Kings Canyon")) |>
  filter(FullName != "",
         FullName != "Baltimore-Washington") |>
  filter(FullName != "National Park of American Samoa",
         FullName != "Waterton Lakes",
         FullName != "Oxon Run",
         FullName != "Western Arctic",
         FullName != "Wolf Trap") |>
  select(-NationalPark) 
```

- Clean visitation FullName column
```{r}
# ---- Clean national park names (FullName) in visitation dataset to match NP dataset ----
visitation_clean <- visitation_clean |>
  mutate(FullName = str_replace(FullName, " & PRES", "")) |>
  mutate(FullName = str_replace(FullName, "Sequoia", "Sequoia and Kings Canyon")) |>
  filter(FullName != "National Park of American Samoa",
         FullName != "Wateron Lakes",
         FullName != "Oxon Run",
         FullName != "Western Arctic",
         FullName != "Wolf Trap")
```


Double check that park name (FullName) now match
```{r}
# Get unique park names for each dataset
park_names <- unique(parks_clean$FullName)
visitation_names <- unique(visitation_clean$FullName)

# Find items in park_names but not in visitation_names
not_in_visitation <- setdiff(park_names, visitation_names)
# Find items in visitation_names but not in park_names
not_in_parks <- setdiff(visitation_names, park_names)

# Find where they do not match
no_match <- union(not_in_visitation, not_in_parks)

not_in_visitation
not_in_parks
no_match
```


### 4) Divide park and visitation datasets into the proper tables for the database
```{r}
# Join visitation and parks by FullName to get park ID in visitation to visitation table
visitation_clean <- visitation_clean |>
  left_join(parks_clean, by = "FullName")

# Join ID to visitation
NP_Key <- parks_clean |>
  left_join(visitation_clean |> select(ID, Region, State), by = "ID")

# Remove park names from visitation, just leave the ID
NP_Visits <- visitation_clean |>
  select(-FullName, -Region, -State)

```

### 5) Clean tables for database

Clean species datasets:
- split into tables for species_occurrence and species_key

```{r}
# --- define species occurrence table ----
NP_Species_History <- species |>
  select(TaxonCode, Occurrence, Observations, ParkCode) |>
  filter(Occurrence == "Present",
         Observations != 0) |>
  select(-Occurrence) |>
  mutate(Year = 2023,
        ObservationID = row_number(),
        TaxonCode = as.integer(TaxonCode),
        Year = as.integer(Year)) |>
  relocate(ObservationID)

# ---- define species key table ----
NP_Species_Key <- species |>
  select(TaxonCode, CategoryName, Order, Family, SciName, CommonNames) |>
  distinct(TaxonCode, .keep_all = TRUE)  |>
  mutate(TaxonCode = as.integer(TaxonCode))

```

### 6) Check tables
```{r}
glimpse(NP_Key)
glimpse(NP_Visits)
glimpse(NP_Species_Key)
glimpse(NP_Species_History)
```


```{r}
# Check NAs

parks_clean |> 
  summarise(across(everything(), ~ sum(is.na(.))))

NP_Visits |> 
  summarise(across(everything(), ~ sum(is.na(.))))

NP_Species_History |> 
  summarise(across(everything(), ~ sum(is.na(.))))

NP_Species_Key |> 
  summarise(across(everything(), ~ sum(is.na(.))))


```


### 7)  Save as database
```{r}
conn <- dbConnect(duckdb(), dbdir = "data/clean/national_parks.duckdb")

# Write the data frames to the DuckDB database
dbWriteTable(conn, "NP_Species_History", NP_Species_History, overwrite = TRUE)
dbWriteTable(conn, "NP_Species_Key", NP_Species_Key, overwrite = TRUE)
dbWriteTable(conn, "NP_Visits", NP_Visits, overwrite = TRUE)
dbWriteTable(conn, "NP_Key", NP_Key, overwrite = TRUE)

```

